#ifndef _STACKTRAVERSE_H_
#define _STACKTRAVERSE_H_

/**
 * @file stacktraverse.h
 * @brief Stack traversal functions for libexecinfo
 * 
 * This header provides low-level stack traversal functions that use
 * GCC's __builtin_return_address() and __builtin_frame_address()
 * functions to walk the call stack.
 * 
 * These functions are generated by gen.py to work around the limitation
 * that the builtin functions only accept compile-time constants.
 */

#ifdef __cplusplus
extern "C" {
#endif

/* Library version */
#define STACKTRAVERSE_VERSION_MAJOR 1
#define STACKTRAVERSE_VERSION_MINOR 1
#define STACKTRAVERSE_VERSION_PATCH 0

/* Maximum supported stack depth */
#define STACKTRAVERSE_MAX_DEPTH 128

/**
 * Get return address at specified stack level
 * 
 * @param level Stack level (0 = caller, 1 = caller's caller, etc.)
 * @return Return address pointer, or NULL if level is invalid/unavailable
 * 
 * @note This function may return NULL for levels beyond the actual
 *       call stack depth or if frame pointers are not available.
 */
void *getreturnaddr(int level) __attribute__((pure));

/**
 * Get frame address at specified stack level
 * 
 * @param level Stack level (0 = caller, 1 = caller's caller, etc.)
 * @return Frame address pointer, or NULL if level is invalid/unavailable
 * 
 * @note This function requires frame pointers to be available.
 *       Compile with -fno-omit-frame-pointer for reliable results.
 */
void *getframeaddr(int level) __attribute__((pure));

#ifdef __cplusplus
}
#endif

#endif /* _STACKTRAVERSE_H_ */